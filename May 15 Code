//This code checks whether the mouse is within the bounds of the yellow square that has been drawn and checks whether it has been clicked
#include <allegro5/allegro.h>
#include <stdio.h>
#include <allegro5/allegro_primitives.h>
#include <allegro5/allegro_native_dialog.h>
#include <allegro5/allegro_image.h>
#include <iostream>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>

struct Image {
    ALLEGRO_BITMAP *bitmap;               // picture
    int x, y;                             // position on screen
};

ALLEGRO_DISPLAY *display;
ALLEGRO_EVENT_QUEUE *event_queue;
const int SCREEN_W = 1920;
const int SCREEN_H = 1080;

// Prototypes
void printImage (int x, int y);
bool loadBitmap(Image &image, const char *filename);
void setPosition(Image &image, int xPos, int yPos);
void mouseClick(int x, int y, Image &image, const char *filename);

int initializeAllegro(int width, int height, const char title[]);
int main(){
    //declare and initialize variables
    bool done = false;
    bool draw = true;
    bool isDrawn = false;
    Image image1, image2;

    al_init();
    al_init_primitives_addon();
    al_install_mouse();
    initializeAllegro(SCREEN_W, SCREEN_H, "SquirrelGame");

    ALLEGRO_EVENT_QUEUE *event_queue = nullptr;
    bool select = false;
    event_queue = al_create_event_queue();
    al_register_event_source(event_queue, al_get_mouse_event_source());

    //Test to load pic with a function
    if (!loadBitmap(image1, "newSquirrel.jpg"))
        return 1;
    //Screen width and length subtract half the size of the image
    setPosition(image1, 960-250, 540-250);
    al_draw_bitmap(image1.bitmap, image1.x, image1.y, 0);

    /*
	// Declare a BITMAP called image, setting it's initial value to nullptr
	ALLEGRO_BITMAP *image = nullptr;

	// Load the bitmap into the Bitmap structure
	// image file must be in same directory.
	// Particularly check return code of this type of function that will fail if file not found.
	image = al_load_bitmap("newSquirrel.jpg");
  	if (!image) {
		al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
      	al_destroy_display(display);
     	return -1;
	 }

	// Display picture started at top left corner
	al_draw_bitmap(image, 680, 320, 0);
    */

	// write display to screen
	al_flip_display();
    /*
    while(true){
    mouseClick(90, 200, image2, "redshirt.jpg");
    }
    */


    while(!done){
        ALLEGRO_EVENT ev;
        al_wait_for_event(event_queue, &ev);
        if(ev.mouse.x >= 90 && ev.mouse.y >= 90 && ev.mouse.x <= 200 && ev.mouse.y <= 200 && ev.type == ALLEGRO_EVENT_MOUSE_BUTTON_DOWN){
                if(ev.mouse.button & 2){
                    printf("Right!(%d, %d)", ev.mouse.x, ev.mouse.y);
                    draw = false;
                    if(!isDrawn)
                        al_destroy_bitmap(image2.bitmap);

                }else if(ev.mouse.button & 1){
                    printf("Left!(%d, %d)", ev.mouse.x, ev.mouse.y);
                    draw = true;
                    isDrawn = true;
            }
            if(draw)
                if (!loadBitmap(image2, "redshirt.jpg"))
                return 1;
                setPosition(image2, 960-250, 540-250);
                al_draw_bitmap(image2.bitmap, image2.x, image2.y, 0);
            al_flip_display();

        }

    }



}

int initializeAllegro(int width, int height, const char title[]) {

    ALLEGRO_COLOR background = al_map_rgb(255, 255, 255);       // make background white.

    // Initialize Allegro
	al_init();

	// initialize display
	display = al_create_display(width, height);
	if (!display) {
    	al_show_native_message_box(display, "Error", "Error", "Failed to initialize display!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
       	return -1;
	}
	al_set_window_title(display, title);

   	// Initialize keyboard routines
	if (!al_install_keyboard()) {
	    al_show_native_message_box(display, "Error", "Error", "failed to initialize the keyboard!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
     	return -1;
   	}

	// need to add image processor
 	if (!al_init_image_addon()) {
    	al_show_native_message_box(display, "Error", "Error", "Failed to initialize image addon!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
    	return -1;
	}
    /*
	// 2. setup timer
	timer = al_create_timer(1.0 / FPS);
   	if (!timer) {
   		al_show_native_message_box(display, "Error", "Error", "Failed to create timer!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
        return -1;
    }

    // Add fonts


   al_init_font_addon(); // initialize the font addon
   al_init_ttf_addon();// initialize the ttf (True Type Font) addon

   arial = al_load_ttf_font("C:/Windows/Fonts/arial.ttf", 16, 0);
   if (!arial){
      al_show_native_message_box(display, "Error", "Error", "Could not load arial.ttf",
                                    nullptr, ALLEGRO_MESSAGEBOX_ERROR);
      return -1;
   }
   */

    // Initialize primative add on
 	if (!al_init_primitives_addon()) {
    	al_show_native_message_box(display, "Error", "Error", "Failed to initialize primatives addon!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
    	return -1;
	}

	// set up event queue
	event_queue = al_create_event_queue();
	if (!event_queue) {
		al_show_native_message_box(display, "Error", "Error", "Failed to create event_queue!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
		al_destroy_display(display);
      	return -1;
	}

    al_clear_to_color(background);
    al_draw_rectangle(90, 90, 200, 200, al_map_rgb(255, 0, 0) , 10);


	al_register_event_source(event_queue, al_get_display_event_source(display));
	//al_register_event_source(event_queue, al_get_timer_event_source(timer));
 	al_register_event_source(event_queue, al_get_keyboard_event_source());

//l_register_event_source(event_queue, al_get_timer_event_source(timer));	*/		// 3. register timer events



	al_flip_display();
	//al_start_timer(timer);
//	std::cout << "Init return zero " << std::endl;
	return 0;
}

void printImage (int x, int y){

    ALLEGRO_DISPLAY *display = nullptr;
    ALLEGRO_BITMAP *image = nullptr;

	image = al_load_bitmap("rainbow2.bmp");
  	if (!image) {
		al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
      	al_destroy_display(display);
	 }

	al_draw_bitmap(image, x, y, 0);

	// write display to screen
	al_flip_display();

}

/*
    loadBitmap. Load bitmap. Check if load correctly. Return false on error.
    Mask out pink part of picture/
*/
bool loadBitmap(Image &image, const char *filename) {
    image.bitmap = al_load_bitmap(filename);
    if (image.bitmap == nullptr) {
		al_show_native_message_box(display, "Error", filename, "Could not load ",
                                 nullptr, ALLEGRO_MESSAGEBOX_ERROR);
		return false;
	}
	//al_convert_mask_to_alpha(image.bitmap, PINK);
	return true;
}

/*
    setPosition  - Locate image at given location
*/
void setPosition(Image &image, int xPos, int yPos) {
    image.x = xPos; //Set the x position of image 1 to 0.
	image.y = yPos; //Set the y position of image 1 to 0.
}

void mouseClick(int x1, int y1, Image &image, const char *filename){
    bool done = false;
    bool draw = true;
    bool isDrawn = false;
    //while(!done){
        ALLEGRO_EVENT ev;
        al_wait_for_event(event_queue, &ev);
        if(ev.mouse.x >= x1 && ev.mouse.y >= x1 && ev.mouse.x <= y1 && ev.mouse.y <= y1 && ev.type == ALLEGRO_EVENT_MOUSE_BUTTON_DOWN){
                if(ev.mouse.button & 2){
                    printf("Right!(%d, %d)", ev.mouse.x, ev.mouse.y);
                    draw = false;
                    if(!isDrawn)
                        al_destroy_bitmap(image.bitmap);

                }else if(ev.mouse.button & 1){
                    printf("Left!(%d, %d)", ev.mouse.x, ev.mouse.y);
                    draw = true;
                    isDrawn = true;
            }
            if(draw)
                loadBitmap(image, filename);
                setPosition(image, 960-250, 540-250);
                al_draw_bitmap(image.bitmap, image.x, image.y, 0);
            al_flip_display();
        //}

    }
}


